---
description: 
globs: 
alwaysApply: true
---
# 1 구현 작업 원칙
 - 비즈니스 로직 구현 작업은 반드시 테스트를 먼저 작성하고 구현하세요.
 - SOLID 원칙을 사용해서 구현하세요.
 - Clean Architecture를 사용해서 구현하세요.
 - Pulumi만 CloudFormation에 설정하는 Description은 영문으로 작성하세요.

# 2 코드 품질 원칙
 - 단순성: 언제나 복잡한 솔루션보다 가장 단순한 솔루션을 우선시하세요.
 - 중복 방지: 코드 중복을 피하고, 가능한 기존 기능을 재사용하세요 (DRY 원칙)
 - 가드레일: 테스트 외에는 개발이나 프로덕션 환경에서 모의 데이터를 사용하지 마세요.
 - 효율성: 명확성을 희생하지 않으면서 토근 사용을 최소화하도록 출력을 최적화하세요.

## 마법의 숫자에 대한 상수
- 하드 코딩 된 값을 명명 된 상수로 바꾸십시오
- 값의 목적을 설명하는 설명 상수 이름 사용
- 상수를 파일 상단 또는 전용 상수 파일에 유지합니다.

## 의미있는 이름
- 변수, 기능 및 클래스는 그 목적을 공개해야합니다
- 이름이 존재하는 이유와 사용 방법을 설명해야합니다.
- 보편적으로 이해되지 않는 한 약어를 피하십시오

## 스마트 댓글
- 코드가하는 일에 대해서는 언급하지 마십시오 - 코드 자체 문서화
- 댓글을 사용하여 특정 방식으로 작업이 수행되는 이유를 설명하십시오.
- 문서 API, 복잡한 알고리즘 및 비각 부작용

## 단일 책임
- 각 함수는 정확히 한 가지를 수행해야합니다
- 기능은 작고 집중해야합니다
- 함수가 무엇을하는지 설명하기 위해 주석이 필요한 경우 분할해야합니다.

## 드라이 (스스로 반복하지 마십시오)
- 반복 된 코드를 재사용 가능한 기능으로 추출합니다
- 적절한 추상화를 통해 공통 논리를 공유하십시오
- 진실의 단일 원천을 유지하십시오

## 청정 구조
- 관련 코드를 함께 유지하십시오
- 논리적 계층 구조로 코드를 구성하십시오
- 일관된 파일과 폴더 이름 지정 규칙을 사용하십시오

## 캡슐화
- 구현 세부 사항을 숨기십시오
- 명확한 인터페이스를 노출시킵니다
- 중첩 조건부를 잘 알려진 기능으로 이동하십시오

## 코드 품질 유지 관리
- 지속적으로 리팩터
- 기술 부채를 일찍 고정하십시오
- 당신이 찾은 것보다 코드를 깨끗하게 두십시오

# 3. 리팩토링
 - 리팩토링이 필요한 경우 계획을 설명하고 허락을 받은 다음 진행하세요.
 - 관련없는 코드나 기능을 제거하지 마세요. 기존 구조를 유지하는데 주의하세요.
 - 코드 구조를 개선하는 것이 목표이며, 기능 변경은 아닙니다.
 - 리팩토링 후에는 모든 테스트가 통과하는지 확인하세요.

# 4. 디버깅
 - 디버깅 시에는 원인 및 해결책을 설명하고 허락을 받은 다음 진행하세요.
 - 에러 해결이 중요한 것이 아니라 제대로 동작하는 것이 중요합니다.
 - 원인이 불분명할 경우 분석을 위해 상세 로그를 추가하세요.

# 5. 언어
 - AWS 리소스에 대한 설명은 영문으로 작성하세요.
 - 기술적인 용어나 라이브러리 이름 등은 원문을 유지하세요.
 - 간단한 다이어그램은 mermaid를 사용하고, 복잡한 아키텍처 다이어그램은 별도의 svg 파일을 생성하고 그걸 문서에 포함시키세요.

# 6. 테스트
- UI 작업시에는 구현을 다 끝낸 다음 테스트 코드를 만드세요.
- UI 이외의 코어 로직은 TDD로 구현하세요.
- 버그를 고치기 전에 테스트를 작성하세요.
- 테스트를 읽을 수 있고 유지관리 할 수 있어요.

# 7. 버전제어
- 명확한 커밋 메시지를 작성하십시오
- 작고 집중된 커밋을 만드십시오
- 의미있는 지점 이름을 사용하십시오