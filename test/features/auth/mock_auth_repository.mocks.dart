// Mocks generated by Mockito 5.4.6 from annotations
// in vibe_coding_flutter/test/features/auth/mock_auth_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;
import 'package:vibe_coding_flutter/features/auth/data/supabase_auth_repository.dart'
    as _i4;
import 'package:vibe_coding_flutter/features/auth/domain/user_with_profile.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGoTrueClient_0 extends _i1.SmartFake implements _i2.GoTrueClient {
  _FakeGoTrueClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFunctionsClient_1 extends _i1.SmartFake
    implements _i2.FunctionsClient {
  _FakeFunctionsClient_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseStorageClient_2 extends _i1.SmartFake
    implements _i2.SupabaseStorageClient {
  _FakeSupabaseStorageClient_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeClient_3 extends _i1.SmartFake
    implements _i2.RealtimeClient {
  _FakeRealtimeClient_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestClient_4 extends _i1.SmartFake
    implements _i2.PostgrestClient {
  _FakePostgrestClient_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSupabaseQueryBuilder_5 extends _i1.SmartFake
    implements _i2.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestFilterBuilder_6<T> extends _i1.SmartFake
    implements _i2.PostgrestFilterBuilder<T> {
  _FakePostgrestFilterBuilder_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeChannel_7 extends _i1.SmartFake
    implements _i2.RealtimeChannel {
  _FakeRealtimeChannel_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestBuilder_8<T1, S> extends _i1.SmartFake
    implements _i2.PostgrestBuilder<T1, S> {
  _FakePostgrestBuilder_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestResponse_9<T1> extends _i1.SmartFake
    implements _i2.PostgrestResponse<T1> {
  _FakePostgrestResponse_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_10<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostgrestTransformBuilder_11<T1> extends _i1.SmartFake
    implements _i2.PostgrestTransformBuilder<T1> {
  _FakePostgrestTransformBuilder_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SupabaseAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseAuthRepository extends _i1.Mock
    implements _i4.SupabaseAuthRepository {
  MockSupabaseAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i2.AuthState> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i3.Stream<_i2.AuthState>.empty(),
          )
          as _i3.Stream<_i2.AuthState>);

  @override
  _i3.Future<_i5.UserWithProfile?> getUserWithProfile(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#getUserWithProfile, [user]),
            returnValue: _i3.Future<_i5.UserWithProfile?>.value(),
          )
          as _i3.Future<_i5.UserWithProfile?>);

  @override
  _i3.Future<void> signUp(String? email, String? password, String? username) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [email, password, username]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> signIn(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [email, password]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i2.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get supabaseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#supabaseUrl),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#supabaseUrl),
            ),
          )
          as String);

  @override
  String get supabaseKey =>
      (super.noSuchMethod(
            Invocation.getter(#supabaseKey),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#supabaseKey),
            ),
          )
          as String);

  @override
  String get schema =>
      (super.noSuchMethod(
            Invocation.getter(#schema),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#schema),
            ),
          )
          as String);

  @override
  String get restUrl =>
      (super.noSuchMethod(
            Invocation.getter(#restUrl),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#restUrl),
            ),
          )
          as String);

  @override
  String get realtimeUrl =>
      (super.noSuchMethod(
            Invocation.getter(#realtimeUrl),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#realtimeUrl),
            ),
          )
          as String);

  @override
  String get authUrl =>
      (super.noSuchMethod(
            Invocation.getter(#authUrl),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#authUrl),
            ),
          )
          as String);

  @override
  String get storageUrl =>
      (super.noSuchMethod(
            Invocation.getter(#storageUrl),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#storageUrl),
            ),
          )
          as String);

  @override
  String get functionsUrl =>
      (super.noSuchMethod(
            Invocation.getter(#functionsUrl),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#functionsUrl),
            ),
          )
          as String);

  @override
  _i2.GoTrueClient get auth =>
      (super.noSuchMethod(
            Invocation.getter(#auth),
            returnValue: _FakeGoTrueClient_0(this, Invocation.getter(#auth)),
          )
          as _i2.GoTrueClient);

  @override
  _i2.FunctionsClient get functions =>
      (super.noSuchMethod(
            Invocation.getter(#functions),
            returnValue: _FakeFunctionsClient_1(
              this,
              Invocation.getter(#functions),
            ),
          )
          as _i2.FunctionsClient);

  @override
  _i2.SupabaseStorageClient get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeSupabaseStorageClient_2(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i2.SupabaseStorageClient);

  @override
  _i2.RealtimeClient get realtime =>
      (super.noSuchMethod(
            Invocation.getter(#realtime),
            returnValue: _FakeRealtimeClient_3(
              this,
              Invocation.getter(#realtime),
            ),
          )
          as _i2.RealtimeClient);

  @override
  _i2.PostgrestClient get rest =>
      (super.noSuchMethod(
            Invocation.getter(#rest),
            returnValue: _FakePostgrestClient_4(this, Invocation.getter(#rest)),
          )
          as _i2.PostgrestClient);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  set auth(_i2.GoTrueClient? _auth) => super.noSuchMethod(
    Invocation.setter(#auth, _auth),
    returnValueForMissingStub: null,
  );

  @override
  set functions(_i2.FunctionsClient? _functions) => super.noSuchMethod(
    Invocation.setter(#functions, _functions),
    returnValueForMissingStub: null,
  );

  @override
  set storage(_i2.SupabaseStorageClient? _storage) => super.noSuchMethod(
    Invocation.setter(#storage, _storage),
    returnValueForMissingStub: null,
  );

  @override
  set realtime(_i2.RealtimeClient? _realtime) => super.noSuchMethod(
    Invocation.setter(#realtime, _realtime),
    returnValueForMissingStub: null,
  );

  @override
  set rest(_i2.PostgrestClient? _rest) => super.noSuchMethod(
    Invocation.setter(#rest, _rest),
    returnValueForMissingStub: null,
  );

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
    Invocation.setter(#headers, headers),
    returnValueForMissingStub: null,
  );

  @override
  _i2.SupabaseQueryBuilder from(String? table) =>
      (super.noSuchMethod(
            Invocation.method(#from, [table]),
            returnValue: _FakeSupabaseQueryBuilder_5(
              this,
              Invocation.method(#from, [table]),
            ),
          )
          as _i2.SupabaseQueryBuilder);

  @override
  _i2.PostgrestClient useSchema(String? schema) =>
      (super.noSuchMethod(
            Invocation.method(#useSchema, [schema]),
            returnValue: _FakePostgrestClient_4(
              this,
              Invocation.method(#useSchema, [schema]),
            ),
          )
          as _i2.PostgrestClient);

  @override
  _i2.PostgrestFilterBuilder<dynamic> rpc(
    String? fn, {
    Map<String, dynamic>? params,
    _i2.FetchOptions? options = const _i2.FetchOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#rpc, [fn], {#params: params, #options: options}),
            returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
              this,
              Invocation.method(
                #rpc,
                [fn],
                {#params: params, #options: options},
              ),
            ),
          )
          as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.RealtimeChannel channel(
    String? name, {
    _i2.RealtimeChannelConfig? opts = const _i2.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#channel, [name], {#opts: opts}),
            returnValue: _FakeRealtimeChannel_7(
              this,
              Invocation.method(#channel, [name], {#opts: opts}),
            ),
          )
          as _i2.RealtimeChannel);

  @override
  List<_i2.RealtimeChannel> getChannels() =>
      (super.noSuchMethod(
            Invocation.method(#getChannels, []),
            returnValue: <_i2.RealtimeChannel>[],
          )
          as List<_i2.RealtimeChannel>);

  @override
  _i3.Future<String> removeChannel(_i2.RealtimeChannel? channel) =>
      (super.noSuchMethod(
            Invocation.method(#removeChannel, [channel]),
            returnValue: _i3.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#removeChannel, [channel]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<List<String>> removeAllChannels() =>
      (super.noSuchMethod(
            Invocation.method(#removeAllChannels, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [PostgrestQueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestQueryBuilder<T> extends _i1.Mock
    implements _i2.PostgrestQueryBuilder<T> {
  MockPostgrestQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostgrestFilterBuilder<R> select<R>([
    String? columns = '*',
    _i2.FetchOptions? options = const _i2.FetchOptions(),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#select, [columns, options]),
            returnValue: _FakePostgrestFilterBuilder_6<R>(
              this,
              Invocation.method(#select, [columns, options]),
            ),
          )
          as _i2.PostgrestFilterBuilder<R>);

  @override
  _i2.PostgrestFilterBuilder<T> insert(
    dynamic values, {
    bool? defaultToNull = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #insert,
              [values],
              {#defaultToNull: defaultToNull},
            ),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(
                #insert,
                [values],
                {#defaultToNull: defaultToNull},
              ),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> upsert(
    dynamic values, {
    String? onConflict,
    bool? ignoreDuplicates = false,
    bool? defaultToNull = true,
    _i2.FetchOptions? options = const _i2.FetchOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #upsert,
              [values],
              {
                #onConflict: onConflict,
                #ignoreDuplicates: ignoreDuplicates,
                #defaultToNull: defaultToNull,
                #options: options,
              },
            ),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(
                #upsert,
                [values],
                {
                  #onConflict: onConflict,
                  #ignoreDuplicates: ignoreDuplicates,
                  #defaultToNull: defaultToNull,
                  #options: options,
                },
              ),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> update(
    Map<dynamic, dynamic>? values, {
    _i2.FetchOptions? options = const _i2.FetchOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#update, [values], {#options: options}),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#update, [values], {#options: options}),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> delete({
    _i2.ReturningOption? returning = _i2.ReturningOption.representation,
    _i2.FetchOptions? options = const _i2.FetchOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {
              #returning: returning,
              #options: options,
            }),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#delete, [], {
                #returning: returning,
                #options: options,
              }),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestBuilder<R, T> withConverter<R>(
    _i2.PostgrestConverter<R, T>? converter,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [converter]),
            returnValue: _FakePostgrestBuilder_8<R, T>(
              this,
              Invocation.method(#withConverter, [converter]),
            ),
          )
          as _i2.PostgrestBuilder<R, T>);

  @override
  _i3.Future<_i2.PostgrestResponse<dynamic>> execute({
    bool? head = false,
    _i2.CountOption? count,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#head: head, #count: count}),
            returnValue: _i3.Future<_i2.PostgrestResponse<dynamic>>.value(
              _FakePostgrestResponse_9<dynamic>(
                this,
                Invocation.method(#execute, [], {#head: head, #count: count}),
              ),
            ),
          )
          as _i3.Future<_i2.PostgrestResponse<dynamic>>);

  @override
  void appendSearchParams(String? key, String? value) => super.noSuchMethod(
    Invocation.method(#appendSearchParams, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  void overrideSearchParams(String? key, String? value) => super.noSuchMethod(
    Invocation.method(#overrideSearchParams, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Stream<T> asStream() =>
      (super.noSuchMethod(
            Invocation.method(#asStream, []),
            returnValue: _i3.Stream<T>.empty(),
          )
          as _i3.Stream<T>);

  @override
  _i3.Future<T> catchError(Function? onError, {bool Function(Object)? test}) =>
      (super.noSuchMethod(
            Invocation.method(#catchError, [onError], {#test: test}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#catchError, [onError], {#test: test}),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_10<T>(
                  this,
                  Invocation.method(#catchError, [onError], {#test: test}),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<R> then<R>(
    _i3.FutureOr<R> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#then, [onValue], {#onError: onError}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<R>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (R v) => _i3.Future<R>.value(v),
                ) ??
                _FakeFuture_10<R>(
                  this,
                  Invocation.method(#then, [onValue], {#onError: onError}),
                ),
          )
          as _i3.Future<R>);

  @override
  _i3.Future<T> timeout(
    Duration? timeLimit, {
    _i3.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #timeout,
                      [timeLimit],
                      {#onTimeout: onTimeout},
                    ),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_10<T>(
                  this,
                  Invocation.method(
                    #timeout,
                    [timeLimit],
                    {#onTimeout: onTimeout},
                  ),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<T> whenComplete(_i3.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#whenComplete, [action]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#whenComplete, [action]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_10<T>(
                  this,
                  Invocation.method(#whenComplete, [action]),
                ),
          )
          as _i3.Future<T>);
}

/// A class which mocks [PostgrestFilterBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestFilterBuilder<T> extends _i1.Mock
    implements _i2.PostgrestFilterBuilder<T> {
  MockPostgrestFilterBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostgrestFilterBuilder<T> not(
    String? column,
    String? operator,
    dynamic value,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#not, [column, operator, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#not, [column, operator, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> or(String? filters, {String? foreignTable}) =>
      (super.noSuchMethod(
            Invocation.method(#or, [filters], {#foreignTable: foreignTable}),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#or, [filters], {#foreignTable: foreignTable}),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> eq(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#eq, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#eq, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> neq(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#neq, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#neq, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> gt(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#gt, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#gt, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> gte(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#gte, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#gte, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> lt(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#lt, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#lt, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> lte(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#lte, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#lte, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> like(String? column, String? pattern) =>
      (super.noSuchMethod(
            Invocation.method(#like, [column, pattern]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#like, [column, pattern]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> likeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#likeAllOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
              this,
              Invocation.method(#likeAllOf, [column, patterns]),
            ),
          )
          as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> likeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#likeAnyOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
              this,
              Invocation.method(#likeAnyOf, [column, patterns]),
            ),
          )
          as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<T> ilike(String? column, String? pattern) =>
      (super.noSuchMethod(
            Invocation.method(#ilike, [column, pattern]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#ilike, [column, pattern]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> ilikeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#ilikeAllOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
              this,
              Invocation.method(#ilikeAllOf, [column, patterns]),
            ),
          )
          as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<dynamic> ilikeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#ilikeAnyOf, [column, patterns]),
            returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
              this,
              Invocation.method(#ilikeAnyOf, [column, patterns]),
            ),
          )
          as _i2.PostgrestFilterBuilder<dynamic>);

  @override
  _i2.PostgrestFilterBuilder<T> is_(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#is_, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#is_, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> in_(String? column, List<dynamic>? values) =>
      (super.noSuchMethod(
            Invocation.method(#in_, [column, values]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#in_, [column, values]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> contains(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#contains, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> containedBy(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#containedBy, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#containedBy, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeLt(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeLt, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#rangeLt, [column, range]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeGt(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeGt, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#rangeGt, [column, range]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeGte(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeGte, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#rangeGte, [column, range]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeLte(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeLte, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#rangeLte, [column, range]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> rangeAdjacent(String? column, String? range) =>
      (super.noSuchMethod(
            Invocation.method(#rangeAdjacent, [column, range]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#rangeAdjacent, [column, range]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> overlaps(String? column, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#overlaps, [column, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#overlaps, [column, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> textSearch(
    String? column,
    String? query, {
    String? config,
    _i2.TextSearchType? type,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #textSearch,
              [column, query],
              {#config: config, #type: type},
            ),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(
                #textSearch,
                [column, query],
                {#config: config, #type: type},
              ),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> filter(
    String? column,
    String? operator,
    dynamic value,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#filter, [column, operator, value]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#filter, [column, operator, value]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestFilterBuilder<T> match(Map<dynamic, dynamic>? query) =>
      (super.noSuchMethod(
            Invocation.method(#match, [query]),
            returnValue: _FakePostgrestFilterBuilder_6<T>(
              this,
              Invocation.method(#match, [query]),
            ),
          )
          as _i2.PostgrestFilterBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<R> select<R>([String? columns = '*']) =>
      (super.noSuchMethod(
            Invocation.method(#select, [columns]),
            returnValue: _FakePostgrestTransformBuilder_11<R>(
              this,
              Invocation.method(#select, [columns]),
            ),
          )
          as _i2.PostgrestTransformBuilder<R>);

  @override
  _i2.PostgrestTransformBuilder<T> order(
    String? column, {
    bool? ascending = false,
    bool? nullsFirst = false,
    String? foreignTable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #order,
              [column],
              {
                #ascending: ascending,
                #nullsFirst: nullsFirst,
                #foreignTable: foreignTable,
              },
            ),
            returnValue: _FakePostgrestTransformBuilder_11<T>(
              this,
              Invocation.method(
                #order,
                [column],
                {
                  #ascending: ascending,
                  #nullsFirst: nullsFirst,
                  #foreignTable: foreignTable,
                },
              ),
            ),
          )
          as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<T> limit(int? count, {String? foreignTable}) =>
      (super.noSuchMethod(
            Invocation.method(#limit, [count], {#foreignTable: foreignTable}),
            returnValue: _FakePostgrestTransformBuilder_11<T>(
              this,
              Invocation.method(#limit, [count], {#foreignTable: foreignTable}),
            ),
          )
          as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<T> range(
    int? from,
    int? to, {
    String? foreignTable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #range,
              [from, to],
              {#foreignTable: foreignTable},
            ),
            returnValue: _FakePostgrestTransformBuilder_11<T>(
              this,
              Invocation.method(
                #range,
                [from, to],
                {#foreignTable: foreignTable},
              ),
            ),
          )
          as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<T> single() =>
      (super.noSuchMethod(
            Invocation.method(#single, []),
            returnValue: _FakePostgrestTransformBuilder_11<T>(
              this,
              Invocation.method(#single, []),
            ),
          )
          as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<T> maybeSingle() =>
      (super.noSuchMethod(
            Invocation.method(#maybeSingle, []),
            returnValue: _FakePostgrestTransformBuilder_11<T>(
              this,
              Invocation.method(#maybeSingle, []),
            ),
          )
          as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestTransformBuilder<T> csv() =>
      (super.noSuchMethod(
            Invocation.method(#csv, []),
            returnValue: _FakePostgrestTransformBuilder_11<T>(
              this,
              Invocation.method(#csv, []),
            ),
          )
          as _i2.PostgrestTransformBuilder<T>);

  @override
  _i2.PostgrestBuilder<R, T> withConverter<R>(
    _i2.PostgrestConverter<R, T>? converter,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [converter]),
            returnValue: _FakePostgrestBuilder_8<R, T>(
              this,
              Invocation.method(#withConverter, [converter]),
            ),
          )
          as _i2.PostgrestBuilder<R, T>);

  @override
  _i3.Future<_i2.PostgrestResponse<dynamic>> execute({
    bool? head = false,
    _i2.CountOption? count,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#head: head, #count: count}),
            returnValue: _i3.Future<_i2.PostgrestResponse<dynamic>>.value(
              _FakePostgrestResponse_9<dynamic>(
                this,
                Invocation.method(#execute, [], {#head: head, #count: count}),
              ),
            ),
          )
          as _i3.Future<_i2.PostgrestResponse<dynamic>>);

  @override
  void appendSearchParams(String? key, String? value) => super.noSuchMethod(
    Invocation.method(#appendSearchParams, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  void overrideSearchParams(String? key, String? value) => super.noSuchMethod(
    Invocation.method(#overrideSearchParams, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Stream<T> asStream() =>
      (super.noSuchMethod(
            Invocation.method(#asStream, []),
            returnValue: _i3.Stream<T>.empty(),
          )
          as _i3.Stream<T>);

  @override
  _i3.Future<T> catchError(Function? onError, {bool Function(Object)? test}) =>
      (super.noSuchMethod(
            Invocation.method(#catchError, [onError], {#test: test}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#catchError, [onError], {#test: test}),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_10<T>(
                  this,
                  Invocation.method(#catchError, [onError], {#test: test}),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<R> then<R>(
    _i3.FutureOr<R> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#then, [onValue], {#onError: onError}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<R>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (R v) => _i3.Future<R>.value(v),
                ) ??
                _FakeFuture_10<R>(
                  this,
                  Invocation.method(#then, [onValue], {#onError: onError}),
                ),
          )
          as _i3.Future<R>);

  @override
  _i3.Future<T> timeout(
    Duration? timeLimit, {
    _i3.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #timeout,
                      [timeLimit],
                      {#onTimeout: onTimeout},
                    ),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_10<T>(
                  this,
                  Invocation.method(
                    #timeout,
                    [timeLimit],
                    {#onTimeout: onTimeout},
                  ),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<T> whenComplete(_i3.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#whenComplete, [action]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#whenComplete, [action]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_10<T>(
                  this,
                  Invocation.method(#whenComplete, [action]),
                ),
          )
          as _i3.Future<T>);
}
